package com.glureau.magicfragment_processor

import com.google.devtools.ksp.processing.Dependencies
import com.google.devtools.ksp.processing.SymbolProcessorEnvironment
import com.google.devtools.ksp.symbol.KSClassDeclaration
import com.google.devtools.ksp.symbol.KSVisitorVoid
import com.squareup.kotlinpoet.ksp.KotlinPoetKspPreview
import com.squareup.kotlinpoet.ksp.toClassName

@KotlinPoetKspPreview
class MagicFragmentVisitor(private val environment: SymbolProcessorEnvironment) : KSVisitorVoid() {

    override fun visitClassDeclaration(declaration: KSClassDeclaration, data: Unit) {
        environment.logger.info("Class name= " + declaration.simpleName.asString())
        val className = declaration.toClassName()

        // A bit trickier to get the synthetic class (generated by Android), so keeping it simple for the example
        val bindingPackage = className.packageName + ".databinding"
        val bindingName = declaration.getAllFunctions().first().parameters.first().type.toString()

        environment.codeGenerator.createNewFile(
            dependencies = Dependencies(
                aggregating = false,
                sources = arrayOf(declaration.containingFile!!)
            ),
            packageName = className.packageName,
            fileName = "Magic" + className.simpleName
        ).use { outputStream ->
            outputStream.writer()
                .use {
                    it.write(
                        """
                        package ${className.packageName}

                        import android.os.Bundle
                        import android.view.LayoutInflater
                        import android.view.View
                        import android.view.ViewGroup
                        import androidx.fragment.app.Fragment
                        import $bindingPackage.$bindingName
                        import ${className.canonicalName}
                        import com.glureau.magicfragment_androidlib.libs.MagicEmptyFragment

                        class Magic${className.simpleName} : Fragment() {

                            private var _binding: $bindingName? = null
                            private val binding get() = _binding!!

                            internal val magicController: MagicEmptyFragment<$bindingName> = ${className.simpleName}()

                            override fun onCreateView(
                                inflater: LayoutInflater, container: ViewGroup?,
                                savedInstanceState: Bundle?
                            ): View {
                                _binding = $bindingName.inflate(inflater, container, false)
                                return binding.root
                            }

                            override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
                                super.onViewCreated(view, savedInstanceState)
                                magicController.run {
                                    onViewCreated(binding)
                                }
                            }

                            override fun onStart() {
                                super.onStart()
                                magicController.run {
                                    onStart(binding)
                                }
                            }

                            override fun onResume() {
                                super.onResume()
                                magicController.run {
                                    onResume(binding)
                                }
                            }

                            override fun onDestroyView() {
                                super.onDestroyView()
                                _binding = null
                            }
                        }
                    """.trimIndent()
                    )
                }
        }
    }

}
