package com.glureau.magicfragment_processor

import com.google.devtools.ksp.symbol.KSClassDeclaration
import com.squareup.kotlinpoet.*
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import com.squareup.kotlinpoet.ksp.KotlinPoetKspPreview
import com.squareup.kotlinpoet.ksp.toClassName


val BUNDLE = ClassName("android.os", "Bundle")
val LAYOUT_INFLATER = ClassName("android.view", "LayoutInflater")
val VIEW = ClassName("android.view", "View")
val VIEW_GROUP = ClassName("android.view", "ViewGroup")
val FRAGMENT = ClassName("androidx.fragment.app", "Fragment")

val MAGIC_EMPTY_FRAGMENT =
    ClassName("com.glureau.magicfragment_androidlib.libs", "MagicEmptyFragment")

@KotlinPoetKspPreview
fun buildFileSpec(declaration: KSClassDeclaration): FileSpec {
    val className = declaration.toClassName()
    // A bit trickier to get the synthetic class (generated by Android), so keeping it simple for the example
    val bindingPackage = className.packageName + ".databinding"
    val bindingName = declaration.getAllFunctions().first().parameters.first().type.toString()
    val binding = ClassName(bindingPackage, bindingName)

    val magicClassName = "Magic" + className.simpleName
    val controllerName = "magicController"
    return FileSpec.builder(className.packageName, magicClassName)
        .addType(
            TypeSpec.classBuilder(magicClassName)
                .superclass(FRAGMENT)
                .addProperty(
                    PropertySpec.builder(
                        "_binding",
                        binding.copy(nullable = true),
                        KModifier.PRIVATE
                    )
                        .mutable()
                        .initializer("null")
                        .build()
                )
                .addProperty(
                    PropertySpec.builder("binding", binding, KModifier.PRIVATE)
                        .getter(FunSpec.getterBuilder().addStatement("return _binding!!").build())
                        .build()
                )
                .addProperty(
                    PropertySpec.builder(
                        controllerName,
                        MAGIC_EMPTY_FRAGMENT.parameterizedBy(binding),
                        KModifier.PRIVATE
                    )
                        .initializer("%T()", className)
                        .build()
                )
                .addFunction(
                    FunSpec.builder("onCreateView")
                        .addModifiers(KModifier.OVERRIDE)
                        .addParameter("inflater", LAYOUT_INFLATER)
                        .addParameter("container", VIEW_GROUP.copy(nullable = true))
                        .addParameter("savedInstanceState", BUNDLE.copy(nullable = true))
                        .returns(VIEW)
                        .addStatement("_binding = $bindingName.inflate(inflater, container, false)")
                        .addStatement("return binding.root")
                        .build()
                )
                .addFunction(
                    FunSpec.builder("onViewCreated")
                        .addModifiers(KModifier.OVERRIDE)
                        .addParameter("view", VIEW)
                        .addParameter("savedInstanceState", BUNDLE.copy(nullable = true))
                        .addStatement("super.onViewCreated(view, savedInstanceState)")
                        .addStatement("$controllerName.run { onViewCreated(binding) }")
                        .build()
                )
                .addFunction(
                    FunSpec.builder("onStart")
                        .addModifiers(KModifier.OVERRIDE)
                        .addStatement("super.onStart()")
                        .addStatement("$controllerName.run { onStart(binding) }")
                        .build()
                )
                .addFunction(
                    FunSpec.builder("onResume")
                        .addModifiers(KModifier.OVERRIDE)
                        .addStatement("super.onResume()")
                        .addStatement("$controllerName.run { onResume(binding) }")
                        .build()
                )
                .addFunction(
                    FunSpec.builder("onDestroyView")
                        .addModifiers(KModifier.OVERRIDE)
                        .addStatement("super.onDestroyView()")
                        .addStatement("_binding = null")
                        .build()
                )
                .build()
        )
        .build()
}